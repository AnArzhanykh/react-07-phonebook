{"version":3,"sources":["components/ContactList/ContactList.module.scss","components/Button/Button.module.scss","components/Section/Section.module.scss","redux/items/items-action.js","components/Button/Button.js","components/ContactList/ContactList .js","redux/filter/filter-action.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/Section/Section.js","App.js","redux/filter/filter-reducer.js","redux/items/items-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","addItems","createAction","name","number","payload","id","uuidv4","deleteItems","connect","dispatch","actions","children","className","styles","Button","onClick","getVisibleItems","items","filter","normolizedFilter","toLowerCase","item","includes","contacts","ContactList","map","filteredName","e","currentTarget","value","type","pattern","title","required","onChange","ContactForm","state","this","setState","ContactForm__input","handleName","bind","handleNumber","ContactForm__button","props","cleanInput","Component","Section","App","filterReducer","createReducer","_","itemsReducer","addItem","alert","normolizedName","find","searchContact","messageAlert","contactsReducer","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6aeb7997.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__2th-H\",\"item\":\"ContactList_item__2aD3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title__contacts\":\"Button_title__contacts__H8426\",\"Button\":\"Button_Button__28TFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title__contacts\":\"Section_title__contacts__THCD_\",\"Section\":\"Section_Section__3h48T\"};","\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const addItems = createAction('item/add', (name, number)=>{\r\n    return {\r\n        payload: {\r\n            id: uuidv4(),\r\n            name,\r\n            number,\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const deleteItems=createAction('item/delete')","import PropTypes from 'prop-types'\r\nimport styles from './Button.module.scss'\r\nimport {connect} from \"react-redux\";\r\nimport *as actions from '../../redux/items/items-action'\r\n\r\nconst Button =( {deleteItems, id, children})=>{\r\n    return(\r\n        <button className={styles.Button} onClick={()=>deleteItems(id)}>{children}</button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    deleteItems: PropTypes.func.isRequired,\r\n    children: PropTypes.string.isRequired,\r\n}\r\nconst mapDispatchToProps = dispatch =>({ \r\n    deleteItems: (id) => dispatch(actions.deleteItems(id))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Button);","import PropTypes from 'prop-types'\r\nimport Button from '../Button'\r\nimport styles from './ContactList.module.scss'\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst ContactList = ({items}) =>{\r\n\r\n    return(\r\n        <ul className={styles.ContactList}>\r\n            {items.map(({name, id, number})=><li className={styles.item}key={id}>{name}:{number} <Button id={id}>Delete</Button> </li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nContactList.propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    // filter: PropTypes.string.isRequired,\r\n\r\n}\r\n\r\nconst getVisibleItems =(items, filter)=>{\r\n    const normolizedFilter = filter.toLowerCase();\r\n    return items.filter((item) =>\r\n      item.name.toLowerCase().includes(normolizedFilter)\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({contacts: {items, filter}}) => ({\r\n    items: getVisibleItems(items, filter)\r\n  }\r\n);\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ContactList)","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const filteredName = createAction('items/filter')","import PropTypes from 'prop-types'\r\nimport {connect} from \"react-redux\";\r\nimport *as actions from '../../redux/filter/filter-action'\r\n// import styles from './Filter.module.scss'\r\n\r\nconst Filter = ({filteredName}) =>{\r\n    return(\r\n        <div>\r\n            <p>Find contacts by name</p>\r\n            <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={filteredName}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filteredName: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    filteredName: (e) => dispatch(actions.filteredName(e.currentTarget.value))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter)","\r\nimport React, {Component} from 'react';\r\nimport styles from './ContactForm.module.scss';\r\nimport {connect} from \"react-redux\";\r\nimport *as actions from '../../redux/items/items-action'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    handleName (e) {\r\n        this.setState({name: e.currentTarget.value})\r\n    }\r\n\r\n    handleNumber(e){\r\n        this.setState({number: e.currentTarget.value})\r\n    }\r\n\r\n    cleanInput(){\r\n        this.setState({name: '', number: ''});\r\n    }\r\n\r\n    render(){\r\n    const {name, number} = this.state;\r\n    return(\r\n        <div className={styles.ContactForm}>\r\n            <label className={styles.ContactForm__input}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={this.handleName.bind(this)}\r\n                />\r\n            </label>\r\n            <label className={styles.ContactForm__input}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    value={number}\r\n                    required\r\n                    onChange={this.handleNumber.bind(this)}\r\n                />\r\n            </label>\r\n\r\n            <button className={styles.ContactForm__button} type=\"submit\"  onClick={() => this.props.addItems(name, number, this.cleanInput())}>\r\n            Add contact\r\n            </button>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    addItems: (name, number) => dispatch(actions.addItems(name, number))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm)","import PropTypes from 'prop-types';\r\nimport styles from'./Section.module.scss';\r\n\r\nconst Section =(props)=>{\r\n    return(\r\n        <div className={styles.Section}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    children: PropTypes.array.isRequired,\r\n}\r\nexport default Section","import React from \"react\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport Section from \"./components/Section\";\r\nimport \"./styles/shared.scss\";\r\n\r\n\r\n\r\nconst App = ()=> {\r\n  return (\r\n      <>\r\n        <Section>\r\n          <h1>Phonebook</h1>\r\n          <ContactForm />\r\n          <h2 className=\"title__contacts\">Contacts</h2>\r\n          <Filter />\r\n          <ContactList/>\r\n        </Section>\r\n      </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport *as actions from './filter-action'\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.filteredName]: (_, {payload}) => payload\r\n})\r\n\r\n\r\nexport default filterReducer;","\r\nimport {  combineReducers } from \"redux\";\r\nimport filterReducer from '../filter/filter-reducer';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport *as actions from './items-action'\r\n\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [actions.addItems]: (state, {payload}) => addItem(state, payload),\r\n    [actions.deleteItems]: (state, {payload}) => state = state.filter((item) => item.id !== payload)\r\n});\r\n\r\nconst addItem =(state, {id, name, number}) =>{\r\n\r\n    if(!(name && number)){\r\n        alert('Please write name and number')\r\n        return state\r\n    }\r\n\r\n    const messageAlert = (name) => {\r\n        alert(`${name} is already in contacts`);\r\n        return state\r\n    }\r\n\r\n    const searchContact = (name) => {\r\n        const normolizedName = name.toLowerCase();\r\n        const item = state.find(\r\n            ({name}) => name.toLowerCase() === normolizedName\r\n        );\r\n        return item;\r\n    }\r\n\r\n    return searchContact(name) ? messageAlert(name) : [...state, {id: id, name: name, number: number} ] \r\n}\r\n\r\n\r\nconst contactsReducer = combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n})\r\n\r\n\r\nexport default contactsReducer;","\r\n\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from \"redux-persist\"\r\nimport contactsReducer from './items/items-reducer'\r\nimport { configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter']\r\n}\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }), logger];\r\n\r\nconst store = configureStore({\r\n    reducer: {contacts: persistReducer(persistConfig, contactsReducer)},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV==='development',\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default {store, persistor};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux'\r\nimport store from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n    <PersistGate loading={null} persistor={store.persistor}>\r\n      <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__3eZvv\",\"ContactForm__input\":\"ContactForm_ContactForm__input__JNTYE\",\"ContactForm__button\":\"ContactForm_ContactForm__button__2YyuQ\"};"],"sourceRoot":""}